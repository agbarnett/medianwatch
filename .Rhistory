scale_x_continuous(breaks=seq(0.1,0.3,0.1))+
ylab('Women funded in first round')+
xlab('Proportion of male applicants')
winner.plot
to.plot
## plot first round winners by proportion male (do not need gap as results are the same)
to.plot = filter(results, gap==0.1)
winner.plot = ggplot(data=to.plot, aes(x=prop.male, y=winner.median, ymin=winner.Q1, ymax=winner.Q3, col=factor(prop.male)))+
geom_point(size=4)+
geom_errorbar(lwd=1.1, width=0)+
scale_color_manual(NULL, values=c('cyan4','antiquewhite4'))+
theme_bw()+
theme(panel.grid.minor = element_blank(), legend.position = 'none')+
#  scale_y_continuous(breaks=c(5,10,15))+
scale_x_continuous(breaks=seq(0.1,0.3,0.1))+
ylab('Women funded in first round')+
xlab('Proportion of male applicants')
winner.plot
## plot first round winners by proportion male (do not need gap as results are the same)
to.plot = filter(results, gap==0.1)
winner.plot = ggplot(data=to.plot, aes(x=prop.male, y=winner.median, ymin=winner.Q1, ymax=winner.Q3, col=factor(prop.male)))+
geom_point(size=4)+
geom_errorbar(lwd=1.1, width=0)+
scale_color_manual(NULL, values=c('cyan4','antiquewhite4'))+
theme_bw()+
theme(panel.grid.minor = element_blank(), legend.position = 'none')+
scale_x_continuous(breaks=c(0.65,0.7))+
ylab('Women funded in first round')+
xlab('Proportion of male applicants')
winner.plot
filter(to.plot, gap==0.2)$counts.median
results
blogdown::build_site()
women.funded.baseline = filter(to.plot, gap==0.2)$success * (1- filter(to.plot, gap==0.2)$p_male) *1000
women.funded.baseline
results
women.funded.old = filter(results, gap==0.2)$success * (1- filter(results, gap==0.2)$p_male) *1000
women.funded.old
filter(results, gap==0.2)$success
women.funded.old = filter(results, gap==0.2, p_male==0.70)$success * (1- 0.7) *1000
women.funded.old = filter(results, gap==0.2, prop.male==0.70)$success * (1- 0.7) *1000
women.funded.old
filter(results, gap==0.2, prop.male==0.70)$counts.median
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
200*0.3
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
q()
?shiny::textAreaInput
blogdown:::serve_site()
library(season)
?cosinor
data(CVD)
res = cosinor(cvd~1, date='month', data=CVD, type='monthly',
family=poisson(), offsetmonth=TRUE)
summary(res)
res$glm
summary(res$glm)
q()
blogdown:::serve_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
knitr::opts_chunk$set(echo = FALSE, collapse = TRUE, warning=FALSE, message=FALSE, error=FALSE, comment='', dpi=400, out.width = "70%")
library(ggplot2)
library(dplyr)
library(tidyr)
library(stringr)
library(gridExtra)
load('data/all_results_microsimulation.RData') # simulation results
meta$IncubPeriod
meta$DurMildInf
load('data/all_results_microsimulation.RData') # simulation results
f1 = data.frame(text='Incubation period, days', meta$meta$IncubPeriod)
load('data/all_results_microsimulation.RData') # simulation results
f1 = data.frame(Parameter='Incubation period, days', value = meta$IncubPeriod, stringsAsFactors = FALSE)
f2 = data.frame(Parameter='Duration of mild infections, days', value = meta$DurMildInf, stringsAsFactors = FALSE)
table = bind_rows(f1, f2 )
pander(table, style='simple')
library(pander)
load('data/all_results_microsimulation.RData') # simulation results
f1 = data.frame(Parameter='Incubation period, days', value = meta$IncubPeriod, stringsAsFactors = FALSE)
f2 = data.frame(Parameter='Duration of mild infections, days', value = meta$DurMildInf, stringsAsFactors = FALSE)
table = bind_rows(f1, f2 )
pander(table, style='simple')
load('data/all_results_microsimulation.RData') # simulation results
f1 = data.frame(Parameter='Incubation period, days', value = meta$IncubPeriod, stringsAsFactors = FALSE)
f2 = data.frame(Parameter='Duration of mild infections, days', value = meta$DurMildInf, stringsAsFactors = FALSE)
f3 = data.frame(Parameter='Fraction of infections that are severe', value = meta$FracSevere, stringsAsFactors = FALSE)
f4 = data.frame(Parameter='Fraction of infections that are critical', value = meta$FracCritical, stringsAsFactors = FALSE)
f5 = data.frame(Parameter='Probability of dying given critical infection', value = meta$ProbDeath, stringsAsFactors = FALSE)
table = bind_rows(f1, f2, f3, f4, f5 )
pander(table, style='simple')
load('data/all_results_microsimulation.RData') # simulation results
f1 = data.frame(Parameter='Incubation period, days', value = meta$IncubPeriod, stringsAsFactors = FALSE)
f2 = data.frame(Parameter='Duration of mild infections, days', value = meta$DurMildInf, stringsAsFactors = FALSE)
f3 = data.frame(Parameter='Fraction of infections that are severe', value = meta$FracSevere, stringsAsFactors = FALSE)
f4 = data.frame(Parameter='Fraction of infections that are critical', value = meta$FracCritical, stringsAsFactors = FALSE)
f5 = data.frame(Parameter='Probability of dying given critical infection', value = meta$ProbDeath, stringsAsFactors = FALSE)
f6 = data.frame(Parameter='Time from ICU admission to death, days', value = meta$TimeICUDeath, stringsAsFactors = FALSE)
f7 = data.frame(Parameter='Duration of hospitalization (severe infections), days', value = meta$DurHosp, stringsAsFactors = FALSE)
f8 = data.frame(Parameter='Transmission rate (mild infections)', value = meta$b1, stringsAsFactors = FALSE)
f9 = data.frame(Parameter='Transmission rate (severe infections, relative to mild)', value = meta$b21, stringsAsFactors = FALSE)
f10 = data.frame(Parameter='Transmission rate (critical infections, relative to mild)', value = meta$b31, stringsAsFactors = FALSE)
table = bind_rows(f1, f2, f3, f4, f5, f6, f7, f8, f9, f10)
pander(table, style='simple')
# remove genders to examine overall transitions
transitions = mutate(all_results,
From = str_remove(From, pattern='f/|m/'), # remove genders
To = str_remove(To, pattern='f/|m/'))
# counts per Simulation of numbers travelling through each state
count.final = group_by(transitions, simnum, To) %>%
summarise(n=n()) %>%
arrange(simnum, n) %>%
mutate(ToNice = factor(To, levels=c('E','I1','I2','I3','R','D'), # make nicer labels
labels = c('Exposed','Mild infection','Severe infection','Critical infection','Recovered','Died')))
# summary stats on counts across simulations (inter-quartile range and 95% CI)
count.summary.final = group_by(count.final, ToNice) %>%
summarise(median=median(n), Q1=quantile(n, 0.25), Q3=quantile(n, 0.75), lower=quantile(n, 0.05), upper=quantile(n, 0.95)) %>%
arrange(-median)
count.summary.final
# counts per Simulation of numbers travelling through each state
count.final = group_by(transitions, simnum, To) %>%
summarise(n=n()) %>%
arrange(simnum, n) %>%
mutate(ToNice = factor(To, levels=c('E','I1','I2','I3','R','D'), # make nicer labels
labels = c('Exposed','Mild infection','Severe infection','Critical infection','Recovered','Died')))
# summary stats on counts across simulations (inter-quartile range and 95% CI)
# Q1=quantile(n, 0.25), Q3=quantile(n, 0.75),
count.summary.final = group_by(count.final, ToNice) %>%
summarise(median=median(n), lower=quantile(n, 0.05), upper=quantile(n, 0.95)) %>%
arrange(-median)
pander(count.summary.final, digits=0)
# counts per Simulation of numbers travelling through each state
count.final = group_by(transitions, simnum, To) %>%
summarise(n=n()) %>%
arrange(simnum, n) %>%
mutate(State = factor(To, levels=c('E','I1','I2','I3','R','D'), # make nicer labels
labels = c('Exposed','Mild infection','Severe infection','Critical infection','Recovered','Died')))
# summary stats on counts across simulations (inter-quartile range and 95% CI)
# Q1=quantile(n, 0.25), Q3=quantile(n, 0.75),
count.summary.final = group_by(count.final, State) %>%
summarise(median=Median(n), lower=quantile(n, 0.05), upper=quantile(n, 0.95)) %>%
mutate(CI = paste(round(lower), ', ', round(upper), sep='')) # make confidence interval
# counts per Simulation of numbers travelling through each state
count.final = group_by(transitions, simnum, To) %>%
summarise(n=n()) %>%
arrange(simnum, n) %>%
mutate(State = factor(To, levels=c('E','I1','I2','I3','R','D'), # make nicer labels
labels = c('Exposed','Mild infection','Severe infection','Critical infection','Recovered','Died')))
# summary stats on counts across simulations (inter-quartile range and 95% CI)
# Q1=quantile(n, 0.25), Q3=quantile(n, 0.75),
count.summary.final = group_by(count.final, State) %>%
summarise(Median=median(n), lower=quantile(n, 0.05), upper=quantile(n, 0.95)) %>%
mutate(CI = paste(round(lower), ', ', round(upper), sep='')) # make confidence interval
arrange(-median) %>%
dplyr::select(-lower, -upper)
# counts per Simulation of numbers travelling through each state
count.final = group_by(transitions, simnum, To) %>%
summarise(n=n()) %>%
arrange(simnum, n) %>%
mutate(State = factor(To, levels=c('E','I1','I2','I3','R','D'), # make nicer labels
labels = c('Exposed','Mild infection','Severe infection','Critical infection','Recovered','Died')))
# summary stats on counts across simulations (inter-quartile range and 95% CI)
# Q1=quantile(n, 0.25), Q3=quantile(n, 0.75),
count.summary.final = group_by(count.final, State) %>%
summarise(Median=median(n), lower=quantile(n, 0.05), upper=quantile(n, 0.95)) %>%
mutate(CI = paste(round(lower), ', ', round(upper), sep='')) # make confidence interval
arrange(-Median) %>%
dplyr::select(-lower, -upper)
# counts per Simulation of numbers travelling through each state
count.final = group_by(transitions, simnum, To) %>%
summarise(n=n()) %>%
arrange(simnum, n) %>%
mutate(State = factor(To, levels=c('E','I1','I2','I3','R','D'), # make nicer labels
labels = c('Exposed','Mild infection','Severe infection','Critical infection','Recovered','Died')))
# summary stats on counts across simulations (inter-quartile range and 95% CI)
# Q1=quantile(n, 0.25), Q3=quantile(n, 0.75),
count.summary.final = group_by(count.final, State) %>%
summarise(Median=median(n), lower=quantile(n, 0.05), upper=quantile(n, 0.95)) %>%
mutate(CI = paste(round(lower), ', ', round(upper), sep='')) %>% # make confidence interval
arrange(-Median) %>%
dplyr::select(-lower, -upper)
pander(count.summary.final, digits=0, style='simple')
# Using Alisons' model
load('data/AlisonResults') #
# Using Alisons' model
load('data/AlisonResults.RData') #
head(out)
knitr::opts_chunk$set(echo = FALSE, collapse = TRUE, warning=FALSE, message=FALSE, error=FALSE, comment='', dpi=400, out.width = "70%")
library(ggplot2)
library(dplyr)
library(tidyr)
library(stringr)
library(gridExtra)
library(pander)
## Data
load('data/all_results_microsimulation.RData') # micro-simulation results
# remove genders to examine overall transitions
transitions = mutate(all_results,
From = str_remove(From, pattern='f/|m/'), # remove genders
To = str_remove(To, pattern='f/|m/'))
# Using Alisons' model
load('data/AlisonResults.RData') #
# number from Alison's model
group_by(out, variable) %>%
slice(n())
# number from Alison's model
alison = group_by(out, variable) %>%
slice(n()) %>%
filter(variable=='R')
alison$value
library(diagram)
par(mai=rep(0.01,4))
labels = c('S','E','I1','I2','I3','R','D')
n.labels = length(labels)
pos = matrix(c(0.1,0.5,
0.25,0.5,
0.4,0.5,
0.55,0.5,
0.7,0.5,
0.85,0.65,
0.85,0.35), ncol=2, byrow=TRUE)
M = matrix(nrow = n.labels, ncol = n.labels, byrow = TRUE, data = 0)
M[2, 1] = "' '"
M[3, 2] = "' '"
M[4, 3] = "' '"
M[5, 4] = "' '"
M[6, 5] = "' '"
M[7, 5] = "' '" # I3 -> D
M[8, 1] = "' '" # S -> HS
library(diagram)
par(mai=rep(0.01,4))
labels = c('S','E','I1','I2','I3','R','D')
n.labels = length(labels)
pos = matrix(c(0.1,0.5,
0.25,0.5,
0.4,0.5,
0.55,0.5,
0.7,0.5,
0.85,0.65,
0.85,0.35), ncol=2, byrow=TRUE)
M = matrix(nrow = n.labels, ncol = n.labels, byrow = TRUE, data = 0)
M[2, 1] = "' '"
M[3, 2] = "' '"
M[4, 3] = "' '"
M[5, 4] = "' '"
M[6, 5] = "' '"
M[7, 5] = "' '" # I3 -> D
M[6, 3] = "' '" # I1 -> R
M[6, 4] = "' '" # I2 -> R
plotmat(M, pos = pos, name = labels, lwd = 1, shadow.size=0, curve=0,
box.lwd = 2, cex.txt = 1, box.size = 0.05, box.col='white',
box.type = 'circle', box.prop = 0.6, txt.col = 'dark blue')
?plotmat
state.labels = read.table(stringsAsFactors = F, sep=',', header=T, text='
Label,State
S,Susceptible
E,Exposed
I1,Mild infection
I2,Severe infection
I3,Critical infection
R,Recovered
D,Dead')
pander(state.labels)
### Some advantages of microsimulations
I like microsimulations because they create “individuals”, and that makes it easier for me to see what’s going on at any point in time. It also makes it easier for me to change to the model and generate bespoke summary statistics (e.g., the number of infected people going to hospital).
library(diagram)
par(mai=rep(0.01,4))
labels = c('S','E','I1','I2','I3','R','D')
n.labels = length(labels)
pos = matrix(c(0.1,0.5,
0.25,0.5,
0.4,0.5,
0.55,0.5,
0.7,0.5,
0.85,0.65,
0.85,0.35), ncol=2, byrow=TRUE)
M = matrix(nrow = n.labels, ncol = n.labels, byrow = TRUE, data = 0)
M[2, 1] = "' '"
M[3, 2] = "' '"
M[4, 3] = "' '"
M[5, 4] = "' '"
M[6, 5] = "' '"
M[7, 5] = "' '" # I3 -> D
M[6, 3] = "' '" # I1 -> R
M[6, 4] = "' '" # I2 -> R
curves = c(0,0,0,0,-0.1,-0.1,-0.1,0.1)
plotmat(M, pos = pos, name = labels, lwd = 1, shadow.size=0, curve=curves,
box.lwd = 2, cex.txt = 1, box.size = 0.05, box.col='white',
box.type = 'circle', box.prop = 0.6, txt.col = 'dark blue')
M
library(diagram)
par(mai=rep(0.01,4))
labels = c('S','E','I1','I2','I3','R','D')
n.labels = length(labels)
pos = matrix(c(0.1,0.5,
0.25,0.5,
0.4,0.5,
0.55,0.5,
0.7,0.5,
0.85,0.65,
0.85,0.35), ncol=2, byrow=TRUE)
M = matrix(nrow = n.labels, ncol = n.labels, byrow = TRUE, data = 0)
M[2, 1] = "' '"
M[3, 2] = "' '"
M[4, 3] = "' '"
M[5, 4] = "' '"
M[6, 5] = "' '"
M[7, 5] = "' '" # I3 -> D
M[6, 3] = "' '" # I1 -> R
M[6, 4] = "' '" # I2 -> R
plotmat(M, pos = pos, name = labels, lwd = 1, shadow.size=0, curve=0,
box.lwd = 2, cex.txt = 1, box.size = 0.05, box.col='white',
box.type = 'circle', box.prop = 0.6, txt.col = 'dark blue')
meta$N.start
meta$starting.probs[2]
count.summary.final$State=='R'
filter(count.summary.final,State=='R')
dplyr::filter(count.summary.final,State=='R')
dplyr::filter(count.summary.final,state=='R')
count.summary.final
dplyr::filter(count.summary.final,State=='Recovered')$Median
0.01*1000
meta$starting.probs[2]
load('data/all_results_vary.RData') # micro-simulation results with varying parameters
load('data/all_results_vary.RData') # micro-simulation results with varying parameters
# convert to cumulative across days
times = group_by(transitions, simnum, To, transitionTime) %>%
summarise(n=n()) %>%
arrange(simnum, To, transitionTime) %>%
group_by(simnum, To) %>%
mutate(cum = cumsum(n),
day = as.numeric(transitionTime - min(transitionTime)),
ToNice = factor(To, levels=c('E','I1','I2','I3','R','D','dead'), # make nicer labels
labels = c('Exposed','Mild infection','Severe infection','Critical infection','Recovered','Died - COVID','Died - Other'))) %>%
ungroup()
colours = grey(runif(50, 0.2, 0.8))
cplot = ggplot(data=times, aes(x=day, y=cum, group=factor(simnum), col=factor(simnum)))+
geom_step(size=0.5)+
scale_color_manual(NULL, values=colours)+
xlab('Day')+
ylab('Cumulative number')+
coord_cartesian(xlim=c(0,150))+
facet_wrap(~ToNice, scales='free_y')+
theme_bw()+
theme(legend.position = 'none')
cplot
?pander
# table of estimates
f1 = data.frame(Parameter='Incubation period, days', Value = meta$IncubPeriod, stringsAsFactors = FALSE)
f2 = data.frame(Parameter='Duration of mild infections, days', Value = meta$DurMildInf, stringsAsFactors = FALSE)
f3 = data.frame(Parameter='Fraction of infections that are severe', Value = meta$FracSevere, stringsAsFactors = FALSE)
f4 = data.frame(Parameter='Fraction of infections that are critical', Value = meta$FracCritical, stringsAsFactors = FALSE)
f5 = data.frame(Parameter='Probability of dying given critical infection', Value = meta$ProbDeath, stringsAsFactors = FALSE)
f6 = data.frame(Parameter='Time from ICU admission to death, days', Value = meta$TimeICUDeath, stringsAsFactors = FALSE)
f7 = data.frame(Parameter='Duration of hospitalization (severe infections), days', Value = meta$DurHosp, stringsAsFactors = FALSE)
f8 = data.frame(Parameter='Transmission rate (mild infections)', Value = meta$b1, stringsAsFactors = FALSE)
f9 = data.frame(Parameter='Transmission rate (severe infections, relative to mild)', Value = meta$b21, stringsAsFactors = FALSE)
f10 = data.frame(Parameter='Transmission rate (critical infections, relative to mild)', Value = meta$b31, stringsAsFactors = FALSE)
f11 = data.frame(Parameter='Population size', Value = meta$N.start, stringsAsFactors = FALSE)
table = bind_rows(f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11)
pander(table, style='simple', justify=c('right','left'))
blogdown::build_site()
# counts per Simulation of numbers travelling through each state
count.final = group_by(transitions, simnum, To) %>%
summarise(n=n()) %>%
arrange(simnum, n) %>%
mutate(State = factor(To, levels=c('E','I1','I2','I3','R','D'), # make nicer labels
labels = c('Exposed','Mild infection','Severe infection','Critical infection','Recovered','Died')))
# summary stats on counts across simulations (inter-quartile range and 95% CI)
# Q1=quantile(n, 0.25), Q3=quantile(n, 0.75),
count.summary.final = group_by(count.final, State) %>%
summarise(Median=median(n), lower=quantile(n, 0.05), upper=quantile(n, 0.95)) %>%
mutate(CI = paste(round(lower), ' to ', round(upper), sep='')) %>% # make confidence interval
arrange(-Median) %>%
dplyr::select(-lower, -upper)
pander(count.summary.final, digits=0, style='simple', justify=c('right','left','left'), split.cells=c(5,5,10))
# number from Alison's model
alison = group_by(out, variable) %>%
slice(n()) %>%
filter(variable=='R')
?split.cells
# table of estimates
f1 = data.frame(Parameter='Incubation period, days', Value = meta$IncubPeriod, stringsAsFactors = FALSE)
f2 = data.frame(Parameter='Duration of mild infections, days', Value = meta$DurMildInf, stringsAsFactors = FALSE)
f3 = data.frame(Parameter='Fraction of infections that are severe', Value = meta$FracSevere, stringsAsFactors = FALSE)
f4 = data.frame(Parameter='Fraction of infections that are critical', Value = meta$FracCritical, stringsAsFactors = FALSE)
f5 = data.frame(Parameter='Probability of dying given critical infection', Value = meta$ProbDeath, stringsAsFactors = FALSE)
f6 = data.frame(Parameter='Time from ICU admission to death, days', Value = meta$TimeICUDeath, stringsAsFactors = FALSE)
f7 = data.frame(Parameter='Duration of hospitalization (severe infections), days', Value = meta$DurHosp, stringsAsFactors = FALSE)
f8 = data.frame(Parameter='Transmission rate (mild infections)', Value = meta$b1, stringsAsFactors = FALSE)
f9 = data.frame(Parameter='Transmission rate (severe infections, relative to mild)', Value = meta$b21, stringsAsFactors = FALSE)
f10 = data.frame(Parameter='Transmission rate (critical infections, relative to mild)', Value = meta$b31, stringsAsFactors = FALSE)
f11 = data.frame(Parameter='Population size', Value = meta$N.start, stringsAsFactors = FALSE)
table = bind_rows(f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11)
pander(table, style='simple', justify=c('right','left'), split.cells=c(1,1))
blogdown::build_site()
q()
q()
blogdown::build_site()
blogdown::build_site()
q()
knitr::opts_chunk$set(echo = FALSE, collapse = TRUE, warning=FALSE, message=FALSE, error=FALSE, comment='', dpi=400, out.width = "70%")
library(ggplot2)
library(dplyr)
library(tidyr)
library(stringr)
library(gridExtra)
library(pander)
## Data
load('data/all_results_microsimulation.RData') # micro-simulation results
# remove genders to examine overall transitions
transitions = mutate(all_results,
From = str_remove(From, pattern='f/|m/'), # remove genders
To = str_remove(To, pattern='f/|m/'))
# Using Alisons' model
load('data/AlisonResults.RData') #
# get the data
load('data/all_results_microsimulation_age.RData') # micro-simulation results with age-dependent rates
str(all_results)
# get the data
load('data/all_results_microsimulation_age.RData') # micro-simulation results with age-dependent rates
#
transitions = mutate(all_results,
From = str_remove(From, pattern='f/|m/'), # remove genders
To = str_remove(To, pattern='f/|m/'))
# summary stats per simulation
age.mean = group_by(transitions, simnum, From, To) %>%
summarise(mean = mean(transitionAge), Q1=quantile(transitionAge, 0.25), Q3=quantile(transitionAge, 0.75))
# plot, first remove hospital transitions
for.plot = filter(age.mean,
!From %in% c('HR','HS','HE','H1','R','S'),
!To %in% c('HR','HS','HE','H1','S','dead')) %>% # remove some transitions to neaten plot
mutate(
FromNice = factor(From, levels=c('E','I1','I2','I3','R','D','HR','HS','H1','HE','dead'), # make nicer labels
labels = c('Exposed','Mild\ninfection','Severe\ninfection','Critical\ninfection','Recovered','Died - COVID','Hospital R','Hospital S','Hospital I1','Hospital E','Died - Other')),
ToNice = factor(To, levels=c('E','I1','I2','I3','R','D','HR','HS','H1','HE','dead'), # make nicer labels
labels = c('Exposed','Mild infection','Severe infection','Critical infection','Recovered','Died - COVID','Hospital R','Hospital S','Hospital I1','Hospital E','Died - Other')))
age.box = ggplot(data=for.plot, aes(x=FromNice, y=mean, fill=ToNice))+
geom_boxplot()+
scale_fill_manual('Transition to', values=cbPalette)+
ylab('Age')+
xlab('Transition from')
# get the data
load('data/all_results_microsimulation_age.RData') # micro-simulation results with age-dependent rates
cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#999999") # colours
#
transitions = mutate(all_results,
From = str_remove(From, pattern='f/|m/'), # remove genders
To = str_remove(To, pattern='f/|m/'))
# summary stats per simulation
age.mean = group_by(transitions, simnum, From, To) %>%
summarise(mean = mean(transitionAge), Q1=quantile(transitionAge, 0.25), Q3=quantile(transitionAge, 0.75))
# plot, first remove hospital transitions
for.plot = filter(age.mean,
!From %in% c('HR','HS','HE','H1','R','S'),
!To %in% c('HR','HS','HE','H1','S','dead')) %>% # remove some transitions to neaten plot
mutate(
FromNice = factor(From, levels=c('E','I1','I2','I3','R','D','HR','HS','H1','HE','dead'), # make nicer labels
labels = c('Exposed','Mild\ninfection','Severe\ninfection','Critical\ninfection','Recovered','Died - COVID','Hospital R','Hospital S','Hospital I1','Hospital E','Died - Other')),
ToNice = factor(To, levels=c('E','I1','I2','I3','R','D','HR','HS','H1','HE','dead'), # make nicer labels
labels = c('Exposed','Mild infection','Severe infection','Critical infection','Recovered','Died - COVID','Hospital R','Hospital S','Hospital I1','Hospital E','Died - Other')))
age.box = ggplot(data=for.plot, aes(x=FromNice, y=mean, fill=ToNice))+
geom_boxplot()+
scale_fill_manual('Transition to', values=cbPalette)+
ylab('Age')+
xlab('Transition from')
age.box
blogdown::build_site()
q()
blogdown::build_site()
q()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
1997-2019
q()
blogdown::build_site()
install.packages('blogdown')
blogdown::build_site()
install.packages("diagram")
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
colourpicker:::plotHelperAddin()
library(blogdown)
blogdown::serve_site()
q()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::hugo_version()
blogdown::update_hugo()
blogdown::hugo_version()
blogdown::build_site()
blogdown::build_site()
q()
blogdown:::serve_site()
blogdown::build_site()
blogdown::build_site()
blogdown::update_hugo()
blogdown::build_site()
blogdown::build_site()
